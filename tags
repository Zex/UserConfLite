!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BST	test/BST.cpp	/^        BST()$/;"	f	class:BST
BST	test/BST.cpp	/^class BST$/;"	c	file:
BUILD	makefiles/predef.mk	/^BUILD			= $(PROJECT_DIR)\/build$/;"	m
Brightness	test/ConfigManager.cpp	/^    void Brightness(double value)$/;"	f
CC	makefiles/predef.mk	/^CC		= gcc$/;"	m
CONFDB	cgi-bin/d4config.php	/^$CONFDB = "\/home\/ag\/lab\/Starter\/dbs\/config.db";$/;"	v
CONF_DB_FILE	test/ConfigManager.h	47;"	d
CXX	makefiles/predef.mk	/^CXX		= g++$/;"	m
Capture4DMode	test/ConfigManager.cpp	/^void ConfigManager::Capture4DMode()$/;"	f	class:ConfigManager
CaptureMode	test/ConfigManager.cpp	/^void ConfigManager::CaptureMode()$/;"	f	class:ConfigManager
ChangeShift	test/ConfigManager.cpp	/^    void ChangeShift(double value)$/;"	f
Chroma	test/ConfigManager.cpp	/^    void Chroma(double value)$/;"	f
ClearParamLine	test/ConfigManager.cpp	/^void ConfigManager::ClearParamLine()$/;"	f	class:ConfigManager
ClearRotationHint	test/ConfigManager.cpp	/^    gboolean ClearRotationHint(gpointer data)$/;"	f
ConfDB	include/ConfLite.h	/^    std::string ConfDB()$/;"	f	class:ConfLite
ConfLite	include/ConfLite.h	/^    ConfLite(std::string fname) : conf_db_file_(fname)$/;"	f	class:ConfLite
ConfLite	include/ConfLite.h	/^class ConfLite$/;"	c
ConfTable	include/ConfLite.h	/^    std::string ConfTable()$/;"	f	class:ConfLite
ConfTable	include/ConfLite.h	/^    void ConfTable(std::string table)$/;"	f	class:ConfLite
ConfigManager	test/ConfigManager.cpp	/^ConfigManager::ConfigManager()$/;"	f	class:ConfigManager
ConfigManager	test/ConfigManager.h	/^class ConfigManager$/;"	c
Contrast	test/ConfigManager.cpp	/^    void Contrast(double value)$/;"	f
CreateImageParam	test/ConfigManager.cpp	/^void ConfigManager::CreateImageParam(GtkWidget* fixed)$/;"	f	class:ConfigManager
DEBUG_KEY	test/ConfigManager.h	52;"	d
DESCRIPTION	Makefile	/^DESCRIPTION	= A sqlite solution to system\/user configure$/;"	m
DESCRIPTION	build/version.h	5;"	d
DESCRIPTION	test/Makefile	/^DESCRIPTION	= A sqlite solution to system\/user configure$/;"	m
Debug	test/ConfigManager.cpp	/^void ConfigManager::Debug()$/;"	f	class:ConfigManager
DefaultValue	include/ConfLite.h	/^    double DefaultValue;$/;"	m	struct:SysConf
Density	test/ConfigManager.cpp	/^    void Density(double value)$/;"	f
DoSetKnobValue	test/ConfigManager.cpp	/^void ConfigManager::DoSetKnobValue($/;"	f	class:ConfigManager
EXEC_SQLITE_LOG	include/ConfLite.h	30;"	d
FHSwingAngle	test/ConfigManager.cpp	/^    void FHSwingAngle(double value)$/;"	f
FnMap	test/ConfigManager.h	/^	std::map<int, std::vector<KeyCallback>> FnMap;$/;"	m	class:ConfigManager
GetInstance	test/ConfigManager.cpp	/^ConfigManager* ConfigManager::GetInstance()$/;"	f	class:ConfigManager
GetItemName	test/ConfigManager.cpp	/^std::string ConfigManager::GetItemName(std::string key)$/;"	f	class:ConfigManager
GetViewConfig	test/ConfigManager.cpp	/^void ConfigManager::GetViewConfig(std::vector<double> &view_value)$/;"	f	class:ConfigManager
Graymap	test/ConfigManager.cpp	/^    void Graymap(double value)$/;"	f
IMAGE_PARAM_NR	test/ConfigManager.h	48;"	d
IMAGE_PARAM_UPPER_NR	test/ConfigManager.h	49;"	d
INCLUDES	Makefile	/^INCLUDES	= include build$/;"	m
INCLUDES	syscall_exp/Makefile	/^INCLUDES = .$/;"	m
InitConfig	test/ConfigManager.cpp	/^void ConfigManager::InitConfig()$/;"	f	class:ConfigManager
KNOB_4DCAPTURE	test/ConfigManager.h	/^	KNOB_4DCAPTURE,$/;"	e	enum:KnobType
KNOB_CAPTURE	test/ConfigManager.h	/^	KNOB_CAPTURE,$/;"	e	enum:KnobType
KNOB_DEBUG	test/ConfigManager.h	/^	KNOB_DEBUG$/;"	e	enum:KnobType
KNOB_FAN	test/ConfigManager.h	/^	KNOB_FAN,$/;"	e	enum:KnobType
KNOB_LINEAR	test/ConfigManager.h	/^	KNOB_LINEAR,$/;"	e	enum:KnobType
KNOB_REVIEW	test/ConfigManager.h	/^	KNOB_REVIEW,$/;"	e	enum:KnobType
KNOB_SLICES	test/ConfigManager.h	/^	KNOB_SLICES,$/;"	e	enum:KnobType
KNOB_VIEW	test/ConfigManager.h	/^	KNOB_VIEW,$/;"	e	enum:KnobType
KNOB_VP_3D	test/ConfigManager.h	/^	KNOB_VP_3D,$/;"	e	enum:KnobType
KNOB_VP_4D	test/ConfigManager.h	/^	KNOB_VP_4D,$/;"	e	enum:KnobType
Key	include/ConfLite.h	/^    std::string Key;$/;"	m	struct:SysConf
Key	include/ConfLite.h	/^    std::string Key;$/;"	m	struct:UserConf
KeyCallback	test/ConfigManager.h	/^	KeyCallback() : callback_(0)$/;"	f	struct:KeyCallback
KeyCallback	test/ConfigManager.h	/^	KeyCallback(std::string k, void (*cb)(double))$/;"	f	struct:KeyCallback
KeyCallback	test/ConfigManager.h	/^struct KeyCallback$/;"	s
KnobF1	test/ConfigManager.cpp	/^void ConfigManager::KnobF1(bool oper)$/;"	f	class:ConfigManager
KnobF2	test/ConfigManager.cpp	/^void ConfigManager::KnobF2(bool oper)$/;"	f	class:ConfigManager
KnobF3	test/ConfigManager.cpp	/^void ConfigManager::KnobF3(bool oper)$/;"	f	class:ConfigManager
KnobF4	test/ConfigManager.cpp	/^void ConfigManager::KnobF4(bool oper)$/;"	f	class:ConfigManager
KnobF5	test/ConfigManager.cpp	/^void ConfigManager::KnobF5(bool oper)$/;"	f	class:ConfigManager
KnobType	test/ConfigManager.h	/^enum KnobType {$/;"	g
LAST_BUILD_TIME	build/version.h	8;"	d
LIBS	Makefile	/^LIBS		=$/;"	m
LN	makefiles/predef.mk	/^LN		= ln -sf$/;"	m
LOG	include/ConfLite.h	21;"	d
LOG	syscall_exp/errhdr.h	12;"	d
LOG_ERR	include/ConfLite.h	24;"	d
LOG_ERR	syscall_exp/errhdr.h	15;"	d
Lower	include/ConfLite.h	/^    double Lower;$/;"	m	struct:SysConf
MAP_SC	include/ConfLite.h	/^typedef std::map<std::string, SysConf> MAP_SC;$/;"	t
MAP_SS	include/ConfLite.h	/^typedef std::map<std::string, std::string> MAP_SS;$/;"	t
MAP_UC	include/ConfLite.h	/^typedef std::map<std::string, UserConf> MAP_UC;$/;"	t
MKDIR	makefiles/predef.mk	/^MKDIR	= mkdir -p$/;"	m
Mode	test/ConfigManager.h	/^    int Mode()$/;"	f	class:ConfigManager
OBJS	makefiles/predef.mk	/^OBJS			= $(patsubst %.cpp, $(BUILD)\/%.o, $(SOURCES))$/;"	m
PROJECT	Makefile	/^PROJECT		= ConfLite$/;"	m
PROJECT	build/version.h	4;"	d
PROJECT	test/Makefile	/^PROJECT		= ConfLite$/;"	m
PROJECT_ALIAS	makefiles/predef.mk	/^PROJECT_ALIAS	= $(shell echo $(PROJECT)|tr '[:upper:]' '[:lower:]')$/;"	m
PROJECT_DIR	makefiles/predef.mk	/^PROJECT_DIR		= $(shell pwd)$/;"	m
PlacentaThreshold	test/ConfigManager.cpp	/^    void PlacentaThreshold(double value)$/;"	f
PreferredScan	test/ConfigManager.cpp	/^std::string ConfigManager::PreferredScan()$/;"	f	class:ConfigManager
PreferredScan	test/ConfigManager.cpp	/^void ConfigManager::PreferredScan(std::string s)$/;"	f	class:ConfigManager
PrepareMode	test/ConfigManager.cpp	/^void ConfigManager::PrepareMode()$/;"	f	class:ConfigManager
QRotate	test/ConfigManager.cpp	/^    void QRotate(double value)$/;"	f
REAL_VAL	test/ConfigManager.h	50;"	d
REVISION	build/version.h	7;"	d
REVISION	makefiles/predef.mk	/^	REVISION		= $(shell git log |head -1|cut -f2 -d\\ |sed -r 's\/(.{5})\/\\1-\/g'|cut -f-8 -d-)$/;"	m
REVISION	makefiles/predef.mk	/^	REVISION		= $(shell svn info|grep "Last Changed Rev"|cut -f2 -d:|cut -f2 -d\\ )$/;"	m
REVISION	makefiles/predef.mk	/^	REVISION		= None$/;"	m
RM	makefiles/predef.mk	/^RM		= rm -rf$/;"	m
Render	test/ConfigManager.cpp	/^    void Render(double value)$/;"	f
ResetView	test/ConfigManager.cpp	/^void ConfigManager::ResetView()$/;"	f	class:ConfigManager
ReviewMode	test/ConfigManager.cpp	/^void ConfigManager::ReviewMode()$/;"	f	class:ConfigManager
RotationX	test/ConfigManager.cpp	/^    void RotationX(double value)$/;"	f
RotationY	test/ConfigManager.cpp	/^    void RotationY(double value)$/;"	f
RotationZ	test/ConfigManager.cpp	/^    void RotationZ(double value)$/;"	f
SCM	Makefile	/^SCM			= git$/;"	m
SHARED_OBJ	makefiles/predef.mk	/^SHARED_OBJ		= $(BUILD)\/lib$(PROJECT_ALIAS).so$/;"	m
SOURCES	makefiles/predef.mk	/^SOURCES			= $(shell find $(SRCS) -iregex ".*\\.c\\(c\\|pp\\|++\\|xx\\)")$/;"	m
SOURCES	test/Makefile	/^SOURCES		= $(shell find $(SRCS) -iregex ".*\\.c\\(c\\|pp\\|++\\|xx\\)")$/;"	m
SPEC_ZOOM_LARGER	test/ConfigManager.h	/^	SPEC_ZOOM_LARGER,$/;"	e	enum:SpecZoom
SPEC_ZOOM_SMALLER	test/ConfigManager.h	/^	SPEC_ZOOM_SMALLER,$/;"	e	enum:SpecZoom
SRCS	Makefile	/^SRCS		= src$/;"	m
SYSCONFTABLE	cgi-bin/d4config.php	/^$SYSCONFTABLE = "SysConf";$/;"	v
ScanDistance	test/ConfigManager.cpp	/^    void ScanDistance(double value)$/;"	f
SendViewValues	test/ConfigManager.cpp	/^void ConfigManager::SendViewValues()$/;"	f	class:ConfigManager
SetKnobValue	test/ConfigManager.cpp	/^void ConfigManager::SetKnobValue(int index_key, int oper, double value)$/;"	f	class:ConfigManager
SetParamLine	test/ConfigManager.cpp	/^void ConfigManager::SetParamLine($/;"	f	class:ConfigManager
SetQuality4D	test/ConfigManager.cpp	/^void ConfigManager::SetQuality4D()$/;"	f	class:ConfigManager
SetVisionGroup	test/ConfigManager.cpp	/^void ConfigManager::SetVisionGroup(double value)$/;"	f	class:ConfigManager
SlicesMode	test/ConfigManager.cpp	/^void ConfigManager::SlicesMode()$/;"	f	class:ConfigManager
Smooth	test/ConfigManager.cpp	/^    void Smooth(double value)$/;"	f
SpecZoom	test/ConfigManager.h	/^enum SpecZoom {	$/;"	g
Step	include/ConfLite.h	/^    double Step;$/;"	m	struct:SysConf
SwitchFocus	test/ConfigManager.cpp	/^void ConfigManager::SwitchFocus(bool param0)$/;"	f	class:ConfigManager
SysConf	dbs/init_db.sql	/^create table SysConf ($/;"	t
SysConf	include/ConfLite.h	/^    SysConf ()$/;"	f	struct:SysConf
SysConf	include/ConfLite.h	/^    SysConf (std::string k, double v, double s, double p, double l, std::string u = "")$/;"	f	struct:SysConf
SysConf	include/ConfLite.h	/^struct SysConf$/;"	s
SysConf	test/ConfigManager.h	/^	MAP_SC SysConf()$/;"	f	class:ConfigManager
SysConf.DefaultValue	dbs/init_db.sql	/^    DefaultValue text not null $/;"	F
SysConf.Key	dbs/init_db.sql	/^    Key text primary key not null,$/;"	F
SysConf.Lower	dbs/init_db.sql	/^    Lower text not null,$/;"	F
SysConf.Step	dbs/init_db.sql	/^    Step text not null$/;"	F
SysConf.Unit	dbs/init_db.sql	/^    Unit text$/;"	F
SysConf.Upper	dbs/init_db.sql	/^    Upper text not null,$/;"	F
SysConfLite	include/ConfLite.h	/^    SysConfLite(std::string fname) : ConfLite(fname) {}$/;"	f	class:SysConfLite
SysConfLite	include/ConfLite.h	/^class SysConfLite : public ConfLite$/;"	c
TH	include/ConfLite.h	27;"	d
TOUCH	makefiles/predef.mk	/^TOUCH	= touch$/;"	m
Threshold	test/ConfigManager.cpp	/^    void Threshold(double value)$/;"	f
TranslateKnobValue	test/ConfigManager.cpp	/^std::string ConfigManager::TranslateKnobValue(std::string name, double value)$/;"	f	class:ConfigManager
USERCONFTABLE	cgi-bin/d4config.php	/^$USERCONFTABLE = "UserConf";$/;"	v
Unit	include/ConfLite.h	/^    std::string Unit;$/;"	m	struct:SysConf
UpdateParamLine	test/ConfigManager.cpp	/^void ConfigManager::UpdateParamLine()$/;"	f	class:ConfigManager
UpdateParamLineEach	test/ConfigManager.cpp	/^void ConfigManager::UpdateParamLineEach(std::string key, int index_key)$/;"	f	class:ConfigManager
UpdateValues	test/ConfigManager.cpp	/^void ConfigManager::UpdateValues()$/;"	f	class:ConfigManager
Upper	include/ConfLite.h	/^    double Upper;$/;"	m	struct:SysConf
UserConf	dbs/init_db.sql	/^create table UserConf ($/;"	t
UserConf	include/ConfLite.h	/^    UserConf ()$/;"	f	struct:UserConf
UserConf	include/ConfLite.h	/^    UserConf (std::string k, std::string v, VT_TABLE vt)$/;"	f	struct:UserConf
UserConf	include/ConfLite.h	/^struct UserConf$/;"	s
UserConf	test/ConfigManager.h	/^	MAP_UC UserConf()$/;"	f	class:ConfigManager
UserConf.Key	dbs/init_db.sql	/^    Key text primary key not null,$/;"	F
UserConf.Value	dbs/init_db.sql	/^    Value text not null,$/;"	F
UserConf.ValueType	dbs/init_db.sql	/^    ValueType integer not null$/;"	F
UserConfLite	include/ConfLite.h	/^class UserConfLite : public ConfLite$/;"	c
UserConfLite	src/ConfLite.cpp	/^UserConfLite::UserConfLite(std::string fname)$/;"	f	class:UserConfLite
VALUE_TYPE	include/ConfLite.h	/^static std::string VALUE_TYPE[] = {$/;"	v
VEC_UC	include/ConfLite.h	/^typedef std::vector<UserConf> VEC_UC;$/;"	t
VERSION	Makefile	/^VERSION		= 0.0.1$/;"	m
VERSION	build/version.h	6;"	d
VERSION	test/Makefile	/^VERSION		= 0.0.1$/;"	m
VERSION_HEADER	makefiles/predef.mk	/^VERSION_HEADER	= $(BUILD)\/version.h$/;"	m
VPQuality	test/ConfigManager.cpp	/^    void VPQuality(double value)$/;"	f
VPSwingAngle	test/ConfigManager.cpp	/^    void VPSwingAngle(double value)$/;"	f
VT_DOUBLE	include/ConfLite.h	/^    VT_DOUBLE, VT_INT, VT_STRING,$/;"	e	enum:VT_TABLE
VT_INT	include/ConfLite.h	/^    VT_DOUBLE, VT_INT, VT_STRING,$/;"	e	enum:VT_TABLE
VT_LAST	include/ConfLite.h	/^    VT_LAST$/;"	e	enum:VT_TABLE
VT_STRING	include/ConfLite.h	/^    VT_DOUBLE, VT_INT, VT_STRING,$/;"	e	enum:VT_TABLE
VT_TABLE	include/ConfLite.h	/^enum VT_TABLE$/;"	g
Value	include/ConfLite.h	/^    std::string Value;$/;"	m	struct:UserConf
ValueType	include/ConfLite.h	/^    VT_TABLE ValueType;$/;"	m	struct:UserConf
ViewMode	test/ConfigManager.cpp	/^void ConfigManager::ViewMode()$/;"	f	class:ConfigManager
Vision	test/ConfigManager.cpp	/^    void Vision(double value)$/;"	f
Zoom	test/ConfigManager.cpp	/^    void Zoom(double value)$/;"	f
_ERR_	include/ConfLite.h	19;"	d
_ERR_	syscall_exp/errhdr.h	10;"	d
_OUT_	include/ConfLite.h	18;"	d
_OUT_	syscall_exp/errhdr.h	9;"	d
__ERRHDR_H_	syscall_exp/errhdr.h	2;"	d
__TRANSLATE_H_	syscall_exp/translate.h	2;"	d
__TS_DEV_	syscall_exp/ts-epoll.cpp	29;"	d	file:
__get_value	include/ConfLite.h	/^    T __get_value(std::string key, std::string entry)$/;"	f	class:ConfLite
__set_value	include/ConfLite.h	/^    void __set_value(std::string key, T value, std::string entry)$/;"	f	class:ConfLite
a	cgi-bin/d4config.php	/^            $a = [];$/;"	v
add_item	cgi-bin/d4config.php	/^function add_item()$/;"	f
add_item	src/ConfLite.cpp	/^void UserConfLite::add_item(UserConf uc)$/;"	f	class:UserConfLite
add_item	src/ConfLite.cpp	/^void UserConfLite::add_item(std::string k, std::string v, VT_TABLE vt)$/;"	f	class:UserConfLite
add_user_item	cgi-bin/d4config.php	/^function add_user_item()$/;"	f
addr	syscall_exp/ts-shm-rd.cpp	/^    void* addr;$/;"	m	struct:shm_entry	file:
addr	syscall_exp/ts-shm.cpp	/^    void* addr;$/;"	m	struct:shm_entry	file:
bintree	test/bintree.cpp	/^    bintree() : root_(NULL)$/;"	f	class:bintree
bintree	test/bintree.cpp	/^    bintree(int e)$/;"	f	class:bintree
bintree	test/bintree.cpp	/^class bintree$/;"	c	file:
buf	cgi-bin/d4config.php	/^        $buf = parse_url($_SERVER['REQUEST_URI']);$/;"	v
callback_	test/ConfigManager.h	/^	void (*callback_)(double value);$/;"	m	struct:KeyCallback
case1	syscall_exp/ts-client.cpp	/^void case1()$/;"	f
case1	syscall_exp/ts-dispatch.cpp	/^int case1(int argc, char* argv[])$/;"	f
case1	syscall_exp/ts-epoll.cpp	/^void case1()$/;"	f
case2	syscall_exp/ts-dispatch.cpp	/^int case2(int argc, char* argv[])$/;"	f
case3	syscall_exp/ts-dispatch.cpp	/^int case3(int argc, char* argv[])$/;"	f
case4	syscall_exp/ts-dispatch.cpp	/^int case4(int argc, char* argv[])$/;"	f
case5	syscall_exp/ts-dispatch.cpp	/^int case5(int argc, char* argv[])$/;"	f
case6	syscall_exp/ts-dispatch.cpp	/^int case6(int argc, char* argv[])$/;"	f
case7	syscall_exp/ts-dispatch.cpp	/^int case7(int argc, char* argv[])$/;"	f
case8	syscall_exp/ts-dispatch.cpp	/^int case8(int argc, char* argv[])$/;"	f
case9	syscall_exp/ts-dispatch.cpp	/^int case9(int argc, char* argv[])$/;"	f
case_1	syscall_exp/ts-mq-rd.cpp	/^void case_1()$/;"	f
case_1	syscall_exp/ts-mq.cpp	/^void case_1()$/;"	f
case_1	syscall_exp/ts-shm-rd.cpp	/^void case_1()$/;"	f
case_1	syscall_exp/ts-shm.cpp	/^void case_1()$/;"	f
case_2	syscall_exp/ts-shm-rd.cpp	/^void case_2()$/;"	f
case_2	syscall_exp/ts-shm.cpp	/^void case_2()$/;"	f
conf_db_file_	include/ConfLite.h	/^    std::string conf_db_file_;$/;"	m	class:ConfLite
conf_table_	include/ConfLite.h	/^    std::string conf_table_;$/;"	m	class:ConfLite
conn_	include/ConfLite.h	/^    sqlite3 *conn_;$/;"	m	class:ConfLite
crash_all	test/bintree.cpp	/^    void crash_all(node *&root)$/;"	f	class:bintree
decode_single	include/ConfLite.h	/^T decode_single(std::string buf)$/;"	f
default_head	cgi-bin/navi.php	/^function default_head($title)$/;"	f
default_navigator	cgi-bin/navi.php	/^function default_navigator()$/;"	f
del_user_item	cgi-bin/d4config.php	/^function del_user_item($key)$/;"	f
encode_single	include/ConfLite.h	/^std::string encode_single(T val)$/;"	f
fd	syscall_exp/ts-client.cpp	/^static int fd;$/;"	v	file:
fd	syscall_exp/ts-epoll.cpp	/^static int fd;$/;"	v	file:
fd_epoll	syscall_exp/ts-client.cpp	/^static int fd_epoll;$/;"	v	file:
fd_epoll	syscall_exp/ts-epoll.cpp	/^static int fd_epoll;$/;"	v	file:
find	test/BST.cpp	/^void BST::find(int item, node **par, node **loc)$/;"	f	class:BST
find	test/bintree.cpp	/^    node* find(int e)$/;"	f	class:bintree
find	test/bintree.cpp	/^    node* find(int e, node* root)$/;"	f	class:bintree
get	src/ConfLite.cpp	/^SysConf SysConfLite::get(std::string key)$/;"	f	class:SysConfLite
get_ai_flag	syscall_exp/translate.cpp	/^std::string get_ai_flag(int f)$/;"	f
get_all	src/ConfLite.cpp	/^MAP_UC UserConfLite::get_all(std::string key)$/;"	f	class:UserConfLite
get_all	src/ConfLite.cpp	/^std::map<std::string, SysConf> SysConfLite::get_all(std::string key)$/;"	f	class:SysConfLite
get_double	src/ConfLite.cpp	/^double UserConfLite::get_double(std::string key)$/;"	f	class:UserConfLite
get_family_name	syscall_exp/translate.cpp	/^std::string get_family_name(int fa)$/;"	f
get_inotify_mask	syscall_exp/translate.cpp	/^std::string get_inotify_mask(uint32_t m)$/;"	f
get_int	src/ConfLite.cpp	/^int UserConfLite::get_int(std::string key)$/;"	f	class:UserConfLite
get_map	src/ConfLite.cpp	/^MAP_SS UserConfLite::get_map(std::string key)$/;"	f	class:UserConfLite
get_sock_level	syscall_exp/translate.cpp	/^std::string get_sock_level(int so)$/;"	f
get_sock_type	syscall_exp/translate.cpp	/^std::string get_sock_type(int so)$/;"	f
get_string	src/ConfLite.cpp	/^std::string UserConfLite::get_string(std::string key)$/;"	f	class:UserConfLite
get_utmp_type	syscall_exp/translate.cpp	/^std::string get_utmp_type(int t)$/;"	f
id	syscall_exp/ts-shm-rd.cpp	/^    int id;$/;"	m	struct:shm_entry	file:
id	syscall_exp/ts-shm.cpp	/^    int id;$/;"	m	struct:shm_entry	file:
image_param_	test/ConfigManager.h	/^	GtkWidget* image_param_[IMAGE_PARAM_NR];$/;"	m	class:ConfigManager
image_param_upper_	test/ConfigManager.h	/^	GtkWidget* image_param_upper_[IMAGE_PARAM_UPPER_NR];$/;"	m	class:ConfigManager
info	test/BST.cpp	/^    int info;$/;"	m	struct:node	file:
inorder	test/bintree.cpp	/^    void inorder(node *&root)$/;"	f	class:bintree
insert	test/BST.cpp	/^void BST::insert(node *tree, node *newnode)$/;"	f	class:BST
insert	test/bintree.cpp	/^    void insert(int e)$/;"	f	class:bintree
insert	test/bintree.cpp	/^    void insert(int e, node *&root)$/;"	f	class:bintree
item	cgi-bin/d4config.php	/^                $item = ltrim(strrchr($k,'_'), '_');$/;"	v
key	cgi-bin/d4config.php	/^                $key = rtrim(str_replace($item, "", $k), '_');$/;"	v
key_	test/ConfigManager.h	/^	std::string key_;$/;"	m	struct:KeyCallback
left	test/BST.cpp	/^    struct node *left;$/;"	m	struct:node	typeref:struct:node::node	file:
left_	test/bintree.cpp	/^    node* left_;$/;"	m	struct:node	file:
main	syscall_exp/ts-client.cpp	/^int main(int argc, char* argv[])$/;"	f
main	syscall_exp/ts-dispatch.cpp	/^int main(int argc, char* argv[])$/;"	f
main	syscall_exp/ts-entry.cpp	/^int main()$/;"	f
main	syscall_exp/ts-epoll.cpp	/^int main(int argc, char* argv[])$/;"	f
main	syscall_exp/ts-mq-rd.cpp	/^int main(int argc, char* argv[])$/;"	f
main	syscall_exp/ts-mq.cpp	/^int main(int argc, char* argv[])$/;"	f
main	syscall_exp/ts-shm-rd.cpp	/^int main(int argc, char* argv[])$/;"	f
main	syscall_exp/ts-shm.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test/BST.cpp	/^int main()$/;"	f
main	test/bintree.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test/selftest-sys.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test/selftest.cpp	/^int main(int argc, char* argv[])$/;"	f
mode_	test/ConfigManager.h	/^    int mode_, mode_before_;$/;"	m	class:ConfigManager
mode_before_	test/ConfigManager.h	/^    int mode_, mode_before_;$/;"	m	class:ConfigManager
node	test/BST.cpp	/^struct node$/;"	s	file:
node	test/bintree.cpp	/^    node(int e = 0)$/;"	f	struct:node
node	test/bintree.cpp	/^struct node$/;"	s	file:
operator <	test/bintree.cpp	/^    friend bool operator< (node &a, node &b)$/;"	f	struct:node
operator <<	include/ConfLite.h	/^    friend std::ostream& operator<< (std::ostream &o, SysConf a)$/;"	f	struct:SysConf
operator <<	include/ConfLite.h	/^    friend std::ostream& operator<< (std::ostream &o, UserConf a)$/;"	f	struct:UserConf
operator <<	test/bintree.cpp	/^    friend std::ostream& operator<< (std::ostream &o, node *nd)$/;"	f	struct:node
operator >	test/bintree.cpp	/^    friend bool operator> (node &a, node &b)$/;"	f	struct:node
postorder	test/bintree.cpp	/^    void postorder(node *&root)$/;"	f	class:bintree
preorder	test/bintree.cpp	/^    void preorder(node *&root)$/;"	f	class:bintree
print_tree	test/bintree.cpp	/^    void print_tree()$/;"	f	class:bintree
print_tree	test/bintree.cpp	/^    void print_tree(node *root)$/;"	f	class:bintree
ptr_instance_	test/ConfigManager.cpp	/^ConfigManager* ConfigManager::ptr_instance_ = NULL;$/;"	m	class:ConfigManager	file:
ptr_instance_	test/ConfigManager.h	/^    static ConfigManager* ptr_instance_;$/;"	m	class:ConfigManager
read_sysconf	cgi-bin/d4config.php	/^function read_sysconf()$/;"	f
read_userconf	cgi-bin/d4config.php	/^function read_userconf()$/;"	f
remove	test/bintree.cpp	/^    void remove(int e)$/;"	f	class:bintree
reply	cgi-bin/d4config.php	/^function reply()$/;"	f
req_keys	cgi-bin/d4config.php	/^            $req_keys = ["Key", "DefaultValue", "Step", "Upper", "Lower"];$/;"	v
req_keys	cgi-bin/d4config.php	/^            $req_keys = ["Key", "Value"];$/;"	v
reset_by_prefix	src/ConfLite.cpp	/^void UserConfLite::reset_by_prefix(std::string key)$/;"	f	class:UserConfLite
reset_user	cgi-bin/d4config.php	/^function reset_user()$/;"	f
right	test/BST.cpp	/^    struct node *right;$/;"	m	struct:node	typeref:struct:node::node	file:
right_	test/bintree.cpp	/^    node* right_;$/;"	m	struct:node	file:
root	test/BST.cpp	/^}*root;$/;"	v	typeref:struct:node
root	test/bintree.cpp	/^    node* root()$/;"	f	class:bintree
root_	test/bintree.cpp	/^    node *root_;$/;"	m	class:bintree	file:
run	syscall_exp/ts-client.cpp	/^static int run;$/;"	v	file:
run	syscall_exp/ts-epoll.cpp	/^static int run;$/;"	v	file:
selftest_case1	test/selftest-sys.cpp	/^void selftest_case1(SysConfLite &u)$/;"	f
selftest_case1	test/selftest.cpp	/^void selftest_case1(UserConfLite &u)$/;"	f
selftest_case2	test/selftest-sys.cpp	/^void selftest_case2(SysConfLite &u)$/;"	f
selftest_case2	test/selftest.cpp	/^void selftest_case2(UserConfLite &u)$/;"	f
selftest_case3	test/selftest-sys.cpp	/^void selftest_case3(SysConfLite &u)$/;"	f
selftest_case3	test/selftest.cpp	/^void selftest_case3(UserConfLite &u)$/;"	f
selftest_case4	test/selftest-sys.cpp	/^void selftest_case4(SysConfLite &u)$/;"	f
selftest_case4	test/selftest.cpp	/^void selftest_case4(UserConfLite &u)$/;"	f
selftest_case5	test/selftest-sys.cpp	/^void selftest_case5(SysConfLite &u)$/;"	f
selftest_case5	test/selftest.cpp	/^void selftest_case5(UserConfLite &u)$/;"	f
selftest_case6	test/selftest-sys.cpp	/^void selftest_case6(SysConfLite &u)$/;"	f
selftest_case6	test/selftest.cpp	/^void selftest_case6(UserConfLite &u)$/;"	f
selftest_case7	test/selftest-sys.cpp	/^void selftest_case7(SysConfLite &u)$/;"	f
selftest_case7	test/selftest.cpp	/^void selftest_case7(UserConfLite &u)$/;"	f
selftest_case8	test/selftest.cpp	/^void selftest_case8(UserConfLite &u)$/;"	f
selftests	test/selftest-sys.cpp	/^void (*selftests[])(SysConfLite&) = {$/;"	v
selftests	test/selftest.cpp	/^void (*selftests[])(UserConfLite&) = {$/;"	v
set_value	src/ConfLite.cpp	/^void UserConfLite::set_value(std::string key, double value)$/;"	f	class:UserConfLite
set_value	src/ConfLite.cpp	/^void UserConfLite::set_value(std::string key, int value)$/;"	f	class:UserConfLite
set_value	src/ConfLite.cpp	/^void UserConfLite::set_value(std::string key, std::string value)$/;"	f	class:UserConfLite
shm_entry	syscall_exp/ts-shm-rd.cpp	/^struct shm_entry$/;"	s	file:
shm_entry	syscall_exp/ts-shm.cpp	/^struct shm_entry$/;"	s	file:
sigquit_cb	syscall_exp/ts-client.cpp	/^void sigquit_cb(int signo)$/;"	f
sigquit_cb	syscall_exp/ts-epoll.cpp	/^void sigquit_cb(int signo)$/;"	f
size	syscall_exp/ts-shm-rd.cpp	/^    size_t size;$/;"	m	struct:shm_entry	file:
size	syscall_exp/ts-shm.cpp	/^    size_t size;$/;"	m	struct:shm_entry	file:
sql	cgi-bin/d4config.php	/^                $sql = "update ".$SYSCONFTABLE." set ".$item."=\\"".$v."\\" where Key == \\"".str_replace('_', '.', $key)."\\";";$/;"	v
sql	cgi-bin/d4config.php	/^            $sql = "delete from ".$USERCONFTABLE." where Key=\\"".$key."\\";";$/;"	v
sql	cgi-bin/d4config.php	/^            $sql = "insert into ".$SYSCONFTABLE." values (";$/;"	v
sql	cgi-bin/d4config.php	/^            $sql = "insert into ".$USERCONFTABLE." (Key, Value, ValueType)";$/;"	v
sql	cgi-bin/d4config.php	/^            $sql = "insert into ".$USERCONFTABLE." values (";$/;"	v
sql	cgi-bin/d4config.php	/^        $sql = "update ".$USERCONFTABLE;$/;"	v
sql	cgi-bin/d4config.php	/^    $sql = "select ".join(",", $titles);$/;"	v
sql_query_cb	src/ConfLite.cpp	/^int sql_query_cb (void* ret, int col_nr, char** rows, char** colnames)$/;"	f
sql_query_map_cb	src/ConfLite.cpp	/^int sql_query_map_cb (void* ret, int col_nr, char** rows, char** colnames)$/;"	f
sql_query_sys_cb	src/ConfLite.cpp	/^int sql_query_sys_cb (void* ret, int col_nr, char** rows, char** colnames)$/;"	f
sql_query_user_cb	src/ConfLite.cpp	/^int sql_query_user_cb (void* ret, int col_nr, char** rows, char** colnames)$/;"	f
swap	test/bintree.cpp	4;"	d	file:
sys_conf_	test/ConfigManager.h	/^	MAP_SC sys_conf_;$/;"	m	class:ConfigManager
titles	cgi-bin/d4config.php	/^    $titles = ["Key", "DefaultValue", "Step", "Upper", "Lower", "Unit"]; $/;"	v
titles	cgi-bin/d4config.php	/^    $titles = ["Key", "Value", "ValueType"];$/;"	v
update_configure	cgi-bin/d4config.php	/^function update_configure()$/;"	f
user_conf_	test/ConfigManager.h	/^	MAP_UC user_conf_;$/;"	m	class:ConfigManager
val_	test/bintree.cpp	/^    int val_;$/;"	m	struct:node	file:
zoom_in_12	test/ConfigManager.cpp	/^void ConfigManager::zoom_in_12()$/;"	f	class:ConfigManager
zoom_in_22	test/ConfigManager.cpp	/^void ConfigManager::zoom_in_22()$/;"	f	class:ConfigManager
zoom_special	test/ConfigManager.cpp	/^void ConfigManager::zoom_special(SpecZoom transfer)$/;"	f	class:ConfigManager
~ConfLite	include/ConfLite.h	/^    ~ConfLite()$/;"	f	class:ConfLite
~ConfigManager	test/ConfigManager.cpp	/^ConfigManager::~ConfigManager()$/;"	f	class:ConfigManager
~SysConf	include/ConfLite.h	/^    ~SysConf ()$/;"	f	struct:SysConf
~SysConfLite	include/ConfLite.h	/^    ~SysConfLite(){}$/;"	f	class:SysConfLite
~UserConf	include/ConfLite.h	/^    ~UserConf ()$/;"	f	struct:UserConf
~UserConfLite	src/ConfLite.cpp	/^UserConfLite::~UserConfLite()$/;"	f	class:UserConfLite
~bintree	test/bintree.cpp	/^    ~bintree()$/;"	f	class:bintree
