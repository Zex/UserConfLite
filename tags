!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUILD	makefiles/predef.mk	/^BUILD			= $(PROJECT_DIR)\/build$/;"	m
CC	makefiles/predef.mk	/^CC		= gcc$/;"	m
CXX	makefiles/predef.mk	/^CXX		= g++$/;"	m
ConfDB	include/ConfLite.h	/^    std::string ConfDB()$/;"	f	class:ConfLite
ConfLite	include/ConfLite.h	/^    ConfLite(std::string fname) : conf_db_file_(fname)$/;"	f	class:ConfLite
ConfLite	include/ConfLite.h	/^class ConfLite$/;"	c
ConfTable	include/ConfLite.h	/^    std::string ConfTable()$/;"	f	class:ConfLite
ConfTable	include/ConfLite.h	/^    void ConfTable(std::string table)$/;"	f	class:ConfLite
DESCRIPTION	Makefile	/^DESCRIPTION	= A sqlite solution to system\/user configure$/;"	m
DESCRIPTION	build/version.h	5;"	d
DESCRIPTION	test/Makefile	/^DESCRIPTION	= A sqlite solution to system\/user configure$/;"	m
DefaultValue	include/ConfLite.h	/^    double DefaultValue;$/;"	m	struct:SysConf
EXEC_SQLITE_LOG	include/ConfLite.h	30;"	d
INCLUDES	Makefile	/^INCLUDES	= include build$/;"	m
Key	include/ConfLite.h	/^    std::string Key;$/;"	m	struct:SysConf
Key	include/ConfLite.h	/^    std::string Key;$/;"	m	struct:UserConf
LAST_BUILD_TIME	build/version.h	8;"	d
LIBS	Makefile	/^LIBS		=$/;"	m
LN	makefiles/predef.mk	/^LN		= ln -sf$/;"	m
LOG	include/ConfLite.h	21;"	d
LOG_ERR	include/ConfLite.h	24;"	d
Lower	include/ConfLite.h	/^    double Lower;$/;"	m	struct:SysConf
MAP_SS	include/ConfLite.h	/^typedef std::map<std::string, std::string> MAP_SS;$/;"	t
MKDIR	makefiles/predef.mk	/^MKDIR	= mkdir -p$/;"	m
OBJS	makefiles/predef.mk	/^OBJS			= $(patsubst %.cpp, $(BUILD)\/%.o, $(SOURCES))$/;"	m
PROJECT	Makefile	/^PROJECT		= ConfLite$/;"	m
PROJECT	build/version.h	4;"	d
PROJECT	test/Makefile	/^PROJECT		= ConfLite$/;"	m
PROJECT_ALIAS	makefiles/predef.mk	/^PROJECT_ALIAS	= $(shell echo $(PROJECT)|tr '[:upper:]' '[:lower:]')$/;"	m
PROJECT_DIR	makefiles/predef.mk	/^PROJECT_DIR		= $(shell pwd)$/;"	m
REVISION	build/version.h	7;"	d
REVISION	makefiles/predef.mk	/^	REVISION		= $(shell git log |head -1|cut -f2 -d\\ |sed -r 's\/(.{5})\/\\1-\/g'|cut -f-8 -d-)$/;"	m
REVISION	makefiles/predef.mk	/^	REVISION		= $(shell svn info|grep "Last Changed Rev"|cut -f2 -d:|cut -f2 -d\\ )$/;"	m
REVISION	makefiles/predef.mk	/^	REVISION		= None$/;"	m
RM	makefiles/predef.mk	/^RM		= rm -rf$/;"	m
SCM	Makefile	/^SCM			= git$/;"	m
SHARED_OBJ	makefiles/predef.mk	/^SHARED_OBJ		= $(BUILD)\/lib$(PROJECT_ALIAS).so$/;"	m
SOURCES	makefiles/predef.mk	/^SOURCES			= $(shell find $(SRCS) -iregex ".*\\.c\\(c\\|pp\\|++\\|xx\\)")$/;"	m
SOURCES	test/Makefile	/^SOURCES		= $(shell find $(SRCS) -iregex ".*\\.c\\(c\\|pp\\|++\\|xx\\)")$/;"	m
SRCS	Makefile	/^SRCS		= src$/;"	m
Step	include/ConfLite.h	/^    double Step;$/;"	m	struct:SysConf
SysConf	dbs/init_db.sql	/^create table SysConf ($/;"	t
SysConf	include/ConfLite.h	/^    SysConf ()$/;"	f	struct:SysConf
SysConf	include/ConfLite.h	/^    SysConf (std::string k, double v, double s, double p, double l, std::string u = "")$/;"	f	struct:SysConf
SysConf	include/ConfLite.h	/^struct SysConf$/;"	s
SysConf.DefaultValue	dbs/init_db.sql	/^    DefaultValue text not null,$/;"	F
SysConf.Key	dbs/init_db.sql	/^    Key text primary key not null,$/;"	F
SysConf.Lower	dbs/init_db.sql	/^    Lower text not null,$/;"	F
SysConf.Step	dbs/init_db.sql	/^    Step text not null,$/;"	F
SysConf.Unit	dbs/init_db.sql	/^    Unit text$/;"	F
SysConf.Upper	dbs/init_db.sql	/^    Upper text not null,$/;"	F
SysConfLite	include/ConfLite.h	/^    SysConfLite(std::string fname) : ConfLite(fname) {}$/;"	f	class:SysConfLite
SysConfLite	include/ConfLite.h	/^class SysConfLite : public ConfLite$/;"	c
TH	include/ConfLite.h	27;"	d
TOUCH	makefiles/predef.mk	/^TOUCH	= touch$/;"	m
Unit	include/ConfLite.h	/^    std::string Unit;$/;"	m	struct:SysConf
Upper	include/ConfLite.h	/^    double Upper;$/;"	m	struct:SysConf
UserConf	dbs/init_db.sql	/^create table UserConf ($/;"	t
UserConf	include/ConfLite.h	/^    UserConf ()$/;"	f	struct:UserConf
UserConf	include/ConfLite.h	/^    UserConf (std::string k, std::string v, VT_TABLE vt)$/;"	f	struct:UserConf
UserConf	include/ConfLite.h	/^struct UserConf$/;"	s
UserConf.Key	dbs/init_db.sql	/^    Key text primary key not null,$/;"	F
UserConf.Value	dbs/init_db.sql	/^    Value text not null,$/;"	F
UserConf.ValueType	dbs/init_db.sql	/^    ValueType integer not null$/;"	F
UserConfLite	include/ConfLite.h	/^class UserConfLite : public ConfLite$/;"	c
UserConfLite	src/ConfLite.cpp	/^UserConfLite::UserConfLite(std::string fname)$/;"	f	class:UserConfLite
VALUE_TYPE	include/ConfLite.h	/^const char* VALUE_TYPE[] = {$/;"	v
VEC_UC	include/ConfLite.h	/^typedef std::vector<UserConf> VEC_UC;$/;"	t
VERSION	Makefile	/^VERSION		= 0.0.1$/;"	m
VERSION	build/version.h	6;"	d
VERSION	test/Makefile	/^VERSION		= 0.0.1$/;"	m
VERSION_HEADER	makefiles/predef.mk	/^VERSION_HEADER	= $(BUILD)\/version.h$/;"	m
VT_DOUBLE	include/ConfLite.h	/^    VT_DOUBLE, VT_INT, VT_STRING,$/;"	e	enum:VT_TABLE
VT_INT	include/ConfLite.h	/^    VT_DOUBLE, VT_INT, VT_STRING,$/;"	e	enum:VT_TABLE
VT_LAST	include/ConfLite.h	/^    VT_LAST$/;"	e	enum:VT_TABLE
VT_STRING	include/ConfLite.h	/^    VT_DOUBLE, VT_INT, VT_STRING,$/;"	e	enum:VT_TABLE
VT_TABLE	include/ConfLite.h	/^enum VT_TABLE$/;"	g
Value	include/ConfLite.h	/^    std::string Value;$/;"	m	struct:UserConf
ValueType	include/ConfLite.h	/^    VT_TABLE ValueType;$/;"	m	struct:UserConf
_ERR_	include/ConfLite.h	19;"	d
_OUT_	include/ConfLite.h	18;"	d
__get_value	include/ConfLite.h	/^    T __get_value(std::string key, std::string entry)$/;"	f	class:ConfLite
__set_value	include/ConfLite.h	/^    void __set_value(std::string key, T value, std::string entry)$/;"	f	class:ConfLite
add_item	src/ConfLite.cpp	/^void UserConfLite::add_item(UserConf uc)$/;"	f	class:UserConfLite
add_item	src/ConfLite.cpp	/^void UserConfLite::add_item(std::string k, std::string v, VT_TABLE vt)$/;"	f	class:UserConfLite
conf_db_file_	include/ConfLite.h	/^    std::string conf_db_file_;$/;"	m	class:ConfLite
conf_table_	include/ConfLite.h	/^    std::string conf_table_;$/;"	m	class:ConfLite
conn_	include/ConfLite.h	/^    sqlite3 *conn_;$/;"	m	class:ConfLite
decode_single	include/ConfLite.h	/^T decode_single(std::string buf)$/;"	f
encode_single	include/ConfLite.h	/^std::string encode_single(T val)$/;"	f
get	src/ConfLite.cpp	/^SysConf SysConfLite::get(std::string key)$/;"	f	class:SysConfLite
get_double	src/ConfLite.cpp	/^double UserConfLite::get_double(std::string key)$/;"	f	class:UserConfLite
get_full	src/ConfLite.cpp	/^VEC_UC UserConfLite::get_full(std::string key)$/;"	f	class:UserConfLite
get_int	src/ConfLite.cpp	/^int UserConfLite::get_int(std::string key)$/;"	f	class:UserConfLite
get_map	src/ConfLite.cpp	/^MAP_SS UserConfLite::get_map(std::string key)$/;"	f	class:UserConfLite
get_string	src/ConfLite.cpp	/^std::string UserConfLite::get_string(std::string key)$/;"	f	class:UserConfLite
main	test/selftest-sys.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test/selftest.cpp	/^int main(int argc, char* argv[])$/;"	f
operator <<	include/ConfLite.h	/^    friend std::ostream& operator<< (std::ostream &o, SysConf a)$/;"	f	struct:SysConf
operator <<	include/ConfLite.h	/^    friend std::ostream& operator<< (std::ostream &o, UserConf a)$/;"	f	struct:UserConf
selftest_case1	test/selftest-sys.cpp	/^void selftest_case1(SysConfLite &u)$/;"	f
selftest_case1	test/selftest.cpp	/^void selftest_case1(UserConfLite &u)$/;"	f
selftest_case2	test/selftest-sys.cpp	/^void selftest_case2(SysConfLite &u)$/;"	f
selftest_case2	test/selftest.cpp	/^void selftest_case2(UserConfLite &u)$/;"	f
selftest_case3	test/selftest-sys.cpp	/^void selftest_case3(SysConfLite &u)$/;"	f
selftest_case3	test/selftest.cpp	/^void selftest_case3(UserConfLite &u)$/;"	f
selftest_case4	test/selftest-sys.cpp	/^void selftest_case4(SysConfLite &u)$/;"	f
selftest_case4	test/selftest.cpp	/^void selftest_case4(UserConfLite &u)$/;"	f
selftest_case5	test/selftest-sys.cpp	/^void selftest_case5(SysConfLite &u)$/;"	f
selftest_case5	test/selftest.cpp	/^void selftest_case5(UserConfLite &u)$/;"	f
selftest_case6	test/selftest-sys.cpp	/^void selftest_case6(SysConfLite &u)$/;"	f
selftest_case6	test/selftest.cpp	/^void selftest_case6(UserConfLite &u)$/;"	f
selftest_case7	test/selftest-sys.cpp	/^void selftest_case7(SysConfLite &u)$/;"	f
selftest_case7	test/selftest.cpp	/^void selftest_case7(UserConfLite &u)$/;"	f
selftests	test/selftest-sys.cpp	/^void (*selftests[])(SysConfLite&) = {$/;"	v
selftests	test/selftest.cpp	/^void (*selftests[])(UserConfLite&) = {$/;"	v
set_value	src/ConfLite.cpp	/^void UserConfLite::set_value(std::string key, double value)$/;"	f	class:UserConfLite
set_value	src/ConfLite.cpp	/^void UserConfLite::set_value(std::string key, int value)$/;"	f	class:UserConfLite
set_value	src/ConfLite.cpp	/^void UserConfLite::set_value(std::string key, std::string value)$/;"	f	class:UserConfLite
sql_query_cb	include/ConfLite.h	/^int sql_query_cb (void* ret, int col_nr, char** rows, char** colnames)$/;"	f
sql_query_full_cb	include/ConfLite.h	/^int sql_query_full_cb (void* ret, int col_nr, char** rows, char** colnames)$/;"	f
sql_query_map_cb	include/ConfLite.h	/^int sql_query_map_cb (void* ret, int col_nr, char** rows, char** colnames)$/;"	f
~ConfLite	include/ConfLite.h	/^    ~ConfLite()$/;"	f	class:ConfLite
~SysConf	include/ConfLite.h	/^    ~SysConf ()$/;"	f	struct:SysConf
~SysConfLite	include/ConfLite.h	/^    ~SysConfLite(){}$/;"	f	class:SysConfLite
~UserConf	include/ConfLite.h	/^    ~UserConf ()$/;"	f	struct:UserConf
~UserConfLite	src/ConfLite.cpp	/^UserConfLite::~UserConfLite()$/;"	f	class:UserConfLite
